using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Serialization;
using BlazorTestWeb.Helpers;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BlazorTestWeb.Data;
//
//    var restaraunt = Restaraunt.FromJson(jsonString);

namespace BlazorTestWeb.Data
{

    public partial class Restaraunt
    {
        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("field_administrative_area", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldAdministrativeArea { get; set; }

        [JsonProperty("field_restaurant_address_organization", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantAddressOrganization { get; set; }

        [JsonProperty("field_restaurant_address_address_line1", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantAddressAddressLine1 { get; set; }

        [JsonProperty("field_restaurant_address_address_line2", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantAddressAddressLine2 { get; set; }

        [JsonProperty("field_restaurant_address_locality", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantAddressLocality { get; set; }

        [JsonProperty("field_restaurant_address_administrative_area", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantAddressAdministrativeArea { get; set; }

        [JsonProperty("field_restaurant_address_postal_code", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantAddressPostalCode { get; set; }

        [JsonProperty("field_restaurant_address_country_code", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantAddressCountryCode { get; set; }

        [JsonProperty("field_restaurant_description", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantDescription { get; set; }

        [JsonProperty("field_restaurant_items", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldRestaurantItems { get; set; }

        [JsonProperty("field_restaurant_link", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantLink { get; set; }

        [JsonProperty("field_restaurant_logo", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantLogo { get; set; }

        [JsonProperty("field_restaurant_coordinates", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantCoordinates { get; set; }

        [JsonProperty("field_restaurant_phone", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantPhone { get; set; }

        [JsonProperty("field_restaurant_search_keywords", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantSearchKeywords { get; set; }

        [JsonProperty("field_restaurant_featured", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantFeatured { get; set; }

        [JsonProperty("nid", NullValueHandling = NullValueHandling.Ignore)]
        public string Nid { get; set; }

        [JsonProperty("field_restaurant_email", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantEmail { get; set; }

        [JsonProperty("field_restaurant_online_ordering", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantOnlineOrdering { get; set; }

        [JsonProperty("field_restaurant_hours", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldRestaurantHours { get; set; }

        [OnDeserialized]
        private void SetExtraData(StreamingContext context)
        {
            FieldRestaurantLogo = $"{Constants.BaseUrl}{FieldRestaurantLogo}";
        }
    }

    public partial class Restaraunt
    {
        public static List<Restaraunt> FromJson(string json) => JsonConvert.DeserializeObject<List<Restaraunt>>(json, RestarauntConverter.Settings);
    }

    public static class RestarauntSerialize
    {
        public static string ToJson(this List<Restaraunt> self) => JsonConvert.SerializeObject(self, RestarauntConverter.Settings);
    }

    internal static class RestarauntConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
