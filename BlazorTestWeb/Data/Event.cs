using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Runtime.Serialization;
using BlazorTestWeb.Helpers;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BlazorTestWeb.Data;
//
//    var event = Event.FromJson(jsonString);

namespace BlazorTestWeb.Data
{

    public partial class Event
    {
        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("field_administrative_area", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldAdministrativeArea { get; set; }

        [JsonProperty("field_event_address_organization", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventAddressOrganization { get; set; }

        [JsonProperty("field_event_address_address_line1", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventAddressAddressLine1 { get; set; }

        [JsonProperty("field_event_address_address_line2", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventAddressAddressLine2 { get; set; }

        [JsonProperty("field_event_address_locality", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventAddressLocality { get; set; }

        [JsonProperty("field_event_address_administrative_area", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventAddressAdministrativeArea { get; set; }

        [JsonProperty("field_event_address_postal_code", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventAddressPostalCode { get; set; }

        [JsonProperty("field_event_address_country_code", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventAddressCountryCode { get; set; }

        [JsonProperty("field_event_description", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventDescription { get; set; }

        [JsonProperty("field_event_date", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventDate { get; set; }

        [JsonProperty("field_event_end_date", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventEndDate { get; set; }

        [JsonProperty("field_event_image", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventImage { get; set; }

        [JsonProperty("field_event_link", NullValueHandling = NullValueHandling.Ignore)]
        public Uri FieldEventLink { get; set; }

        [JsonProperty("field_event_assets", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> FieldEventAssets { get; set; }

        [JsonProperty("field_event_map_coordinates", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventMapCoordinates { get; set; }

        [JsonProperty("field_event_phone", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventPhone { get; set; }

        [JsonProperty("field_event_search_keywords", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventSearchKeywords { get; set; }

        [JsonProperty("field_event_featured", NullValueHandling = NullValueHandling.Ignore)]
        public string FieldEventFeatured { get; set; }

        public string ThisEventString{ get; set;  }

        [OnDeserialized]
        private void SetExtraData(StreamingContext context)
        {
            FieldEventImage = $"{Constants.BaseUrl}{FieldEventImage}";
        }
    }
    public partial class Event
    {
        public static ObservableCollection<Event> FromJson(string json) => JsonConvert.DeserializeObject<ObservableCollection<Event>>(json, EventConverter.Settings);
    }

    public static class EventSerialize
    {
        public static string ToJson(this ObservableCollection<Event> self) => JsonConvert.SerializeObject(self, EventConverter.Settings);
    }

    internal static class EventConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
